{"ast":null,"code":"/**\n * Callback function for adding new node to GraphVis.\n */\nexport function addNode(nodeData, callback) {\n  // Set parameters of the new node\n  let blub = 1;\n\n  if (blub === 1) {\n    nodeData.shape = 'square';\n    nodeData.margin = 16;\n    nodeData.label = '   ';\n    nodeData.color = {\n      background: 'white',\n      border: '#000000'\n    };\n    nodeData.borderWidth = 1;\n    nodeData.shadow = {\n      enabled: false\n    };\n  } else if (blub === 2) {\n    nodeData.shape = 'triangle';\n    nodeData.margin = 16;\n    nodeData.label = '   ';\n    nodeData.color = {\n      background: 'white',\n      border: '#000000'\n    };\n    nodeData.borderWidth = 1;\n    nodeData.shadow = {\n      enabled: false\n    };\n  } else {}\n\n  callback(nodeData);\n}\nexport function addCircleNode(nodeData, callback) {\n  nodeData.shape = 'circle';\n  nodeData.margin = 16;\n  nodeData.label = '   ';\n  nodeData.color = {\n    background: 'white',\n    border: '#000000'\n  };\n  nodeData.borderWidth = 1;\n  nodeData.shadow = {\n    enabled: false\n  };\n  callback(nodeData);\n}\n/**\n * Displays dialog with form for editing selected node.\n */\n\nexport function showEditNodeDialog(nodeData, callback) {\n  // Fill node edit dialog's inputs by selected node data\n  let labelInput = nodeData.label;\n  if (labelInput === '   ') labelInput = '';\n  document.getElementById('inpNodeLabel').value = labelInput; //document.getElementById('inpNodeColor').value = nodeData.color.background;\n  // document.getElementById('inpNodeMargin').value = nodeData.margin;\n  //document.getElementById('inpLabelColor').value = nodeData.font.color;\n  // Bind saveNode and cancelEditNode functions\n\n  document.getElementById('btnSave').onclick = saveNode.bind(this, nodeData, document, callback);\n  document.getElementById('btnCancel').onclick = cancelNodeEdit.bind(this, document, callback);\n  document.getElementById('editNodeDialog').style.display = 'block';\n}\n/**\n * Sets inputed data to the selected node, saves the node and hides the Node Edit dialog.\n */\n\nfunction saveNode(nodeData, document, callback) {\n  let newLabel = document.getElementById('inpNodeLabel').value;\n  if (newLabel.length === 1) newLabel = ' ' + newLabel + ' ';\n  if (newLabel === '') newLabel = '   ';\n  nodeData.label = newLabel; //nodeData.color.background = document.getElementById('inpNodeColor').value;\n  // nodeData.margin = document.getElementById('inpNodeMargin').value;\n  //nodeData.font.color = document.getElementById('inpLabelColor').value;\n\n  clearEditNodeDialog(document);\n  callback(nodeData);\n}\n/**\n * Cancels editing of node and hides Edit Node dialog.\n */\n\n\nfunction cancelNodeEdit(document, callback) {\n  clearEditNodeDialog(document);\n  callback(null);\n}\n\n;\n/**\n * Clears and hides Edit Node dialog.\n */\n\nfunction clearEditNodeDialog(document) {\n  document.getElementById('btnSave').onclick = null;\n  document.getElementById('btnCancel').onclick = null;\n  document.getElementById('editNodeDialog').style.display = 'none';\n}","map":{"version":3,"sources":["C:/Users/Surfy/Documents/HSR/Semester 5/SA/ReactTutorial/TopologyTest/TopologyTest/src/functions/NodeFunctions.js"],"names":["addNode","nodeData","callback","blub","shape","margin","label","color","background","border","borderWidth","shadow","enabled","addCircleNode","showEditNodeDialog","labelInput","document","getElementById","value","onclick","saveNode","bind","cancelNodeEdit","style","display","newLabel","length","clearEditNodeDialog"],"mappings":"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","sourcesContent":["\n/**\n * Callback function for adding new node to GraphVis.\n */\nexport function addNode(nodeData, callback) {\n  // Set parameters of the new node\n  let blub = 1;\n\n  if(blub === 1){\n    nodeData.shape = 'square';\n    nodeData.margin = 16;\n    nodeData.label = '   ';\n    nodeData.color = { background: 'white', border: '#000000' };\n    nodeData.borderWidth = 1;\n    nodeData.shadow = { enabled: false };\n  }\n  else if (blub === 2){\n    nodeData.shape = 'triangle';\n    nodeData.margin = 16;\n    nodeData.label = '   ';\n    nodeData.color = { background: 'white', border: '#000000' };\n    nodeData.borderWidth = 1;\n    nodeData.shadow = { enabled: false };\n  }\n  else{\n\n  }\n\n  callback(nodeData);\n}\n\nexport function addCircleNode(nodeData, callback) {\n\n  nodeData.shape = 'circle';\n  nodeData.margin = 16;\n  nodeData.label = '   ';\n  nodeData.color = { background: 'white', border: '#000000' };\n  nodeData.borderWidth = 1;\n  nodeData.shadow = { enabled: false };\n\n  callback(nodeData);\n}\n\n/**\n * Displays dialog with form for editing selected node.\n */\nexport function showEditNodeDialog(nodeData, callback) {\n  // Fill node edit dialog's inputs by selected node data\n  let labelInput = nodeData.label;\n  if (labelInput === '   ')\n    labelInput = '';\n\n  document.getElementById('inpNodeLabel').value = labelInput;\n  //document.getElementById('inpNodeColor').value = nodeData.color.background;\n  // document.getElementById('inpNodeMargin').value = nodeData.margin;\n  //document.getElementById('inpLabelColor').value = nodeData.font.color;\n  // Bind saveNode and cancelEditNode functions\n  document.getElementById('btnSave').onclick = saveNode.bind(this, nodeData, document, callback);\n  document.getElementById('btnCancel').onclick = cancelNodeEdit.bind(this, document, callback);\n  document.getElementById('editNodeDialog').style.display = 'block';\n}\n\n/**\n * Sets inputed data to the selected node, saves the node and hides the Node Edit dialog.\n */\nfunction saveNode(nodeData, document, callback) {\n  let newLabel = document.getElementById('inpNodeLabel').value;\n  if (newLabel.length === 1)\n    newLabel = ' ' + newLabel + ' ';\n\n  if (newLabel === '')\n    newLabel = '   ';\n\n  nodeData.label = newLabel;\n  //nodeData.color.background = document.getElementById('inpNodeColor').value;\n  // nodeData.margin = document.getElementById('inpNodeMargin').value;\n  //nodeData.font.color = document.getElementById('inpLabelColor').value;\n  clearEditNodeDialog(document);\n  callback(nodeData);\n}\n\n/**\n * Cancels editing of node and hides Edit Node dialog.\n */\nfunction cancelNodeEdit(document, callback) {\n  clearEditNodeDialog(document);\n  callback(null);\n};\n\n/**\n * Clears and hides Edit Node dialog.\n */\nfunction clearEditNodeDialog(document) {\n  document.getElementById('btnSave').onclick = null;\n  document.getElementById('btnCancel').onclick = null;\n  document.getElementById('editNodeDialog').style.display = 'none';\n}\n"]},"metadata":{},"sourceType":"module"}