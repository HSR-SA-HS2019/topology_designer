{"ast":null,"code":"import axios from \"axios\";\n/**\n * Callback function for adding new node to GraphVis.\n */\n\nexport function addNode(nodeData, callback) {\n  // Set parameters of the new node\n  axios.get('http://127.0.0.1:8000/api/1').then(res => {\n    nodeData.label = res.data.name;\n    console.log(typeof res.data.name);\n  });\n  nodeData.shape = 'square';\n  nodeData.margin = 16; //nodeData.label = '   ';\n\n  nodeData.color = {\n    background: 'white',\n    border: '#000000'\n  };\n  nodeData.borderWidth = 1;\n  nodeData.shadow = {\n    enabled: false\n  };\n  callback(nodeData);\n}\n/**\n * Displays dialog with form for editing selected node.\n */\n\nexport function showEditNodeDialog(nodeData, callback) {\n  // Fill node edit dialog's inputs by selected node data\n  let labelInput = nodeData.label;\n  if (labelInput === '   ') labelInput = '';\n  document.getElementById('inpNodeLabel').value = labelInput;\n  document.getElementById('btnSave').onclick = saveNode.bind(this, nodeData, document, callback);\n  document.getElementById('btnCancel').onclick = cancelNodeEdit.bind(this, document, callback);\n  document.getElementById('editNodeDialog').style.display = 'block';\n}\n/**\n * Sets inputed data to the selected node, saves the node and hides the Node Edit dialog.\n */\n\nfunction saveNode(nodeData, document, callback) {\n  let newLabel = document.getElementById('inpNodeLabel').value;\n  if (newLabel.length === 1) newLabel = ' ' + newLabel + ' ';\n  if (newLabel === '') newLabel = '   ';\n  nodeData.label = newLabel;\n  clearEditNodeDialog(document);\n  callback(nodeData);\n}\n/**\n * Cancels editing of node and hides Edit Node dialog.\n */\n\n\nfunction cancelNodeEdit(document, callback) {\n  clearEditNodeDialog(document);\n  callback(null);\n}\n\n;\n/**\n * Clears and hides Edit Node dialog.\n */\n\nfunction clearEditNodeDialog(document) {\n  document.getElementById('btnSave').onclick = null;\n  document.getElementById('btnCancel').onclick = null;\n  document.getElementById('editNodeDialog').style.display = 'none';\n}","map":{"version":3,"sources":["C:/Users/Surfy/Documents/HSR/Semester 5/SA/topology_designer/frontend/src/functions/NodeFunctions.js"],"names":["axios","addNode","nodeData","callback","get","then","res","label","data","name","console","log","shape","margin","color","background","border","borderWidth","shadow","enabled","showEditNodeDialog","labelInput","document","getElementById","value","onclick","saveNode","bind","cancelNodeEdit","style","display","newLabel","length","clearEditNodeDialog"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;AAGA,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;AAC1C;AACAH,EAAAA,KAAK,CAACI,GAAN,CAAU,6BAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACXJ,IAAAA,QAAQ,CAACK,KAAT,GAAiBD,GAAG,CAACE,IAAJ,CAASC,IAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOL,GAAG,CAACE,IAAJ,CAASC,IAA5B;AACD,GAJL;AAKAP,EAAAA,QAAQ,CAACU,KAAT,GAAiB,QAAjB;AACAV,EAAAA,QAAQ,CAACW,MAAT,GAAkB,EAAlB,CAR0C,CAS1C;;AACAX,EAAAA,QAAQ,CAACY,KAAT,GAAiB;AAAEC,IAAAA,UAAU,EAAE,OAAd;AAAuBC,IAAAA,MAAM,EAAE;AAA/B,GAAjB;AACAd,EAAAA,QAAQ,CAACe,WAAT,GAAuB,CAAvB;AACAf,EAAAA,QAAQ,CAACgB,MAAT,GAAkB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAlB;AACAhB,EAAAA,QAAQ,CAACD,QAAD,CAAR;AACD;AAGD;;;;AAGA,OAAO,SAASkB,kBAAT,CAA4BlB,QAA5B,EAAsCC,QAAtC,EAAgD;AACrD;AACA,MAAIkB,UAAU,GAAGnB,QAAQ,CAACK,KAA1B;AACA,MAAIc,UAAU,KAAK,KAAnB,EACEA,UAAU,GAAG,EAAb;AAEFC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAxC,GAAgDH,UAAhD;AACAC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCE,OAAnC,GAA6CC,QAAQ,CAACC,IAAT,CAAc,IAAd,EAAoBzB,QAApB,EAA8BoB,QAA9B,EAAwCnB,QAAxC,CAA7C;AACAmB,EAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCE,OAArC,GAA+CG,cAAc,CAACD,IAAf,CAAoB,IAApB,EAA0BL,QAA1B,EAAoCnB,QAApC,CAA/C;AACAmB,EAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CM,KAA1C,CAAgDC,OAAhD,GAA0D,OAA1D;AACD;AAED;;;;AAGA,SAASJ,QAAT,CAAkBxB,QAAlB,EAA4BoB,QAA5B,EAAsCnB,QAAtC,EAAgD;AAC9C,MAAI4B,QAAQ,GAAGT,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAvD;AACA,MAAIO,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EACED,QAAQ,GAAG,MAAMA,QAAN,GAAiB,GAA5B;AAEF,MAAIA,QAAQ,KAAK,EAAjB,EACEA,QAAQ,GAAG,KAAX;AAEF7B,EAAAA,QAAQ,CAACK,KAAT,GAAiBwB,QAAjB;AACAE,EAAAA,mBAAmB,CAACX,QAAD,CAAnB;AACAnB,EAAAA,QAAQ,CAACD,QAAD,CAAR;AACD;AAED;;;;;AAGA,SAAS0B,cAAT,CAAwBN,QAAxB,EAAkCnB,QAAlC,EAA4C;AAC1C8B,EAAAA,mBAAmB,CAACX,QAAD,CAAnB;AACAnB,EAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AAAA;AAED;;;;AAGA,SAAS8B,mBAAT,CAA6BX,QAA7B,EAAuC;AACrCA,EAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCE,OAAnC,GAA6C,IAA7C;AACAH,EAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCE,OAArC,GAA+C,IAA/C;AACAH,EAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CM,KAA1C,CAAgDC,OAAhD,GAA0D,MAA1D;AACD","sourcesContent":["import axios from \"axios\";\n\n/**\n * Callback function for adding new node to GraphVis.\n */\nexport function addNode(nodeData, callback) {\n  // Set parameters of the new node\n  axios.get('http://127.0.0.1:8000/api/1')\n      .then(res => {\n        nodeData.label = res.data.name\n        console.log(typeof res.data.name)\n      })\n  nodeData.shape = 'square';\n  nodeData.margin = 16;\n  //nodeData.label = '   ';\n  nodeData.color = { background: 'white', border: '#000000' };\n  nodeData.borderWidth = 1;\n  nodeData.shadow = { enabled: false };\n  callback(nodeData);\n}\n\n\n/**\n * Displays dialog with form for editing selected node.\n */\nexport function showEditNodeDialog(nodeData, callback) {\n  // Fill node edit dialog's inputs by selected node data\n  let labelInput = nodeData.label;\n  if (labelInput === '   ')\n    labelInput = '';\n\n  document.getElementById('inpNodeLabel').value = labelInput;\n  document.getElementById('btnSave').onclick = saveNode.bind(this, nodeData, document, callback);\n  document.getElementById('btnCancel').onclick = cancelNodeEdit.bind(this, document, callback);\n  document.getElementById('editNodeDialog').style.display = 'block';\n}\n\n/**\n * Sets inputed data to the selected node, saves the node and hides the Node Edit dialog.\n */\nfunction saveNode(nodeData, document, callback) {\n  let newLabel = document.getElementById('inpNodeLabel').value;\n  if (newLabel.length === 1)\n    newLabel = ' ' + newLabel + ' ';\n\n  if (newLabel === '')\n    newLabel = '   ';\n\n  nodeData.label = newLabel;\n  clearEditNodeDialog(document);\n  callback(nodeData);\n}\n\n/**\n * Cancels editing of node and hides Edit Node dialog.\n */\nfunction cancelNodeEdit(document, callback) {\n  clearEditNodeDialog(document);\n  callback(null);\n};\n\n/**\n * Clears and hides Edit Node dialog.\n */\nfunction clearEditNodeDialog(document) {\n  document.getElementById('btnSave').onclick = null;\n  document.getElementById('btnCancel').onclick = null;\n  document.getElementById('editNodeDialog').style.display = 'none';\n}\n"]},"metadata":{},"sourceType":"module"}